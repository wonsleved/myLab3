#ifndef MYLAB3_HEAP_H
#define MYLAB3_HEAP_H



#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <sstream>
#include <functional>
#include "../Exceptions/Exceptions.h"

using std::vector;
using std::string;
using std::cout;

template <class T>
class Heap
{
private:
    T* m_data;
    int m_size;
public:
    Heap();
    Heap(T& item);
    Heap(T&& item);
    Heap(T* items, int count);
    Heap(Heap& another);

    ~Heap();

    Heap<T>& insert(T& item);
    Heap<T>& insert(T&& item);

    Heap<T>& remove(T& item);
    Heap<T>& remove(T&& item);

    bool searchItem(T& item);
    bool searchItem(T&& item);

    Heap<T>* cut(T& item);
    Heap<T>* cut(T&& item);

    bool searchSubHeap(Heap<T>& another);
    bool searchSubHeap(Heap<T>&& another);

    int getSize();

    Heap<T>* writeToFile(std::string& path);
    Heap<T>* writeToFile(std::string&& path);
    Heap<T>* insertFromFile(std::string& path);
    Heap<T>* insertFromFile(std::string&& path);

private:
    void quickSort(T* array, int low, int high);
    int getHeight(int index) const;
    int getRightChild(int index) const;
    int getLeftChild(int index) const;
    int getParent(int index) const;
    Heap<T>& preOrderTravers(int index, std::function<void(T*)> func);
    bool searchSubHeapDev(int destination, int source, Heap<T>& another);

private:
    struct cellDisplay {
        string   valstr;
        bool     present;
        cellDisplay() : present(false) {};
        cellDisplay(std::string valstr) : valstr(valstr), present(true) {};
    };

    using displayRows = vector< vector< cellDisplay > >;
// The text tree generation code below is all iterative, to avoid stack faults.

// getRowDisplay builds a vector of vectors of cell_display structs
// each vector of cell_display structs represents one row, starting at the root
    displayRows getRowDisplay() const;

// rowFormatter takes the vector of rows of cell_display structs
// generated by getRowDisplay and formats it into a test representation
// as a vector of strings
    vector<string> rowFormatter(const displayRows& rowsDisp) const;

// Trims an equal number of space characters from
// the beginning of each string in the vector.
// At least one string in the vector will end up beginning
// with no space characters.
    static void trimRowsLeft(vector<string>& rows);
public:
// Dumps a representation of the tree to cout
    std::ostream& Dump(std::ostream& out) const;
};




#include "Heap.inl"


#endif
